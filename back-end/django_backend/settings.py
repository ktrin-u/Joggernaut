"""
Django settings for django_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-de$2j#e9_qbyi(mmka8#y1rzszuv%)@z4xsxcn217)!&qg!u1-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'oauth2_provider',
    'api.apps.ApiConfig',
    'drf_spectacular',
    'drf_spectacular_sidecar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'django_backend.urls'

TEMPLATES = [   # type:ignore
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Check if mysql.conf exists
mysqlconf = Path("./conf/mysql.conf")

if not mysqlconf.is_file():
    raise FileNotFoundError("conf/mysql.conf is missing")

DATABASES = {   # type: ignore
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "OPTIONS": {
            "read_default_file": mysqlconf.resolve().as_posix(),
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'api.validators.CustomPasswordValidator',
    }
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },

]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    'oauth2_provider.backends.OAuth2Backend',
]

OAUTH_SCOPES = {
    'read': 'Read scope',
    'write': 'Write scope'
},

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope'
    },
    "ACCESS_TOKEN_EXPIRE_SCONDS": 36000,
    "REFRESH_TOKEN_EXPIRE_SECONDS": 36000
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "oauth2_provider.contrib.rest_framework.TokenHasScope",
        'api.permissions.isBanned',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

env = Path("./conf/.env")

if not env.is_file():
    raise FileNotFoundError("conf/mysql.conf is missing")

SPECTACULAR_SETTINGS = {
    'TITLE': 'Joggernaut API',
    'DESCRIPTION': 'API for Joggernaut app',
    'VERSION': '0.1.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'ENABLE_DJANGO_DEPLOY_CHECK': False,
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": False,
        "persistAuthorization": True,
    },
    'SWAGGER_UI_OAUTH2_CONFIG': {
        "clientId": "EAdjk5dlE5ssgncPU8n4PeaQ1QYyqydhT0mPyyPi",
        "clientSecret": "VKsT4ne6eGiXpN6542Aw6b0WGEpYqV8DkeggumUTkYKccJK6qaj64vYpbImRQjus9v0PzHrfYndKH49NMoDPNaasSwJeEXbW63kOXkIf79Pz6Xq1E2x8q3bsL7xSxCJp",
        "appName": "api"
    },
    'OAUTH2_FLOWS': ["password"],
    'OAUTH2_SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope'
    },
    'OAUTH2_AUTHORIZATION_URL': "/api/auth/authorize",
    'OAUTH2_TOKEN_URL': "/api/auth/token/",
    'OAUTH2_REFRESH_URL': "/api/auth/refresh",
    'SERVE_AUTHENTICATION': None
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = "api.User"
